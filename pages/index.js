<<<<<<< HEAD
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import clientPromise from '../lib/mongodb'


export default function Home({isConnected}) {
=======
import Head from "next/head";
import styles from "../styles/Home.module.css";
import en from "../locales/en";
import ar from "../locales/ar";
import { useRouter } from "next/router";
export default function Home() {
  const { locale, locales, asPath } = useRouter();
  console.log(locales);
  // const { locale } = router;
  const t = locale === 0 ? en : ar;
>>>>>>> 59f37ca40da4fccdea69630abff0501236b0be2c
  return (
    <div className={styles.container}>
      <Head>
        <title>Hello World</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
<<<<<<< HEAD
              <center>
              <h1>
                Hello world!
                </h1> 
                
                
                </center>
              
                {isConnected ? (
          <h2 >You are connected to MongoDB</h2>
        ) : (
          <h2 >
            You are NOT connected to MongoDB. Check the <code>README.md</code>{' '}
            for instructions.
          </h2>
        )}
=======
      <center>Hello World</center>
      <div className={styles.navbar}>
        {/* {locales.map((l, i) => {
            return (
              <span key={i} className={l === locale ? styles.selected : ""}>
                <Link href={asPath} locale={l}>
                  {l}
                </Link>
              </span>
            );
          })} */}
      </div>
>>>>>>> 59f37ca40da4fccdea69630abff0501236b0be2c
    </div>
  )
}




export async function getServerSideProps(context) {
  try {
    // client.db() will be the default database passed in the MONGODB_URI
    // You can change the database by calling the client.db() function and specifying a database like:
    // const db = client.db("myDatabase");
    // Then you can execute queries against your database like so:
    // db.find({}) or any of the MongoDB Node Driver commands
    await clientPromise
    return {
      props: { isConnected: true },
    }
  } catch (e) {
    console.error(e)
    return {
      props: { isConnected: false },
    }
  }
}